.NOLIST
#define   EQU   .equ
#define   equ   .equ
#define   END   .end
#define   end   .end
#include "ti83plus.inc"
.LIST

	.org 9D93h
	.db $BB,$6D
	
	LD HL, 0
	LD (CurRow), HL
	B_CALL(_ClrLCDFull)
	
WaitBegin:
	B_CALL(_GetCSC)
	CP skClear
	JR Z, Done
	IN A, (bport)
	CP D0HD1L
	JR NZ, WaitBegin
;link is now established
	LD HL, Started
	B_CALL(_PutS)
	CALL Input
	LD D, B
	CALL Input
	LD E, B
	LD (RecieveLength), DE
	;check for bizarre string length:
	LD A, D
	CP 2
	JR NC, Error
	CP 0
	JR Z, Zero
Back:
	LD HL, String1
	B_CALL(_Mov9ToOP1)
	B_CALL(_FindSym)
	B_CALL(_DelVar)
	LD HL, String1
	B_CALL(_Mov9ToOP1)
	LD HL, (RecieveLength)
	B_CALL(_CreateStrng)
	;RET ; just testing string length for now
	LD HL, String1     ;this and
	B_CALL(_Mov9ToOP1) ;this are probably redundant, but just to make sure...
	B_CALL(_FindSym)   ;and this also
	INC DE
	INC DE 
	PUSH DE ;DE is now pointer to start of Str1 (in stack)
	
Recieve:
	CALL Input
	POP HL
	LD (HL), B
	INC HL
	PUSH HL
	LD BC, (RecieveLength)
	DEC BC
	LD (RecieveLength), BC
	LD A, C
	CP 0
	JR NZ, Recieve
	LD A, B
	CP 0
	JR NZ, Recieve
	JR Worked
Error:
	LD HL, 0
	PUSH HL
	LD (CurRow), HL
	LD HL, ErrorTxt
Worked:
	POP HL
Done:
	RET ;end of program
Input:;uses A, B, C, HL. Returns B
	LD B, 0
	LD C, %10000000
Loop1:
	B_CALL(_GetCSC)
	CP skClear
	JR Z, Done
	IN A, (bport)
	CP D0LD1L; logically, this should be D0HD1H, but this seems to work...
	JR Z, InZero
	IN A, (bport) ;this should be redundant, but seems to be necessary
	CP D0LD1H
	JR Z, InOne
	JR Loop1
InOne:
	; LD HL, One
	; B_CALL(_PutS)
	LD A, B
	OR C
	LD B, A
InZero:
	; LD HL, Zero
	; B_CALL(_PutS)
	SRL C
Loop3:
	B_CALL(_GetCSC)
	CP skClear
	JR Z, Done
	IN A, (bport)
	CP D0HD1L
	JR NZ, Loop3
	LD A, C
	CP 0
	JR NZ, Loop1
	RET ;recieved a byte
Zero: ;if the length is zero
	LD A, E
	CP 0
	JR Z, Error
	JP Back ;this has to be JP. too far to be JR
; DispZero:
	; LD HL, Zero
	; B_CALL(_PutS)
	; JR InZero
String1:
	.DB StrngObj,tVarStrng,tStr1,0,0
RecieveLength .EQU AppBackUpScreen + 8
ErrorTxt .DB "Overflow"
Started .db "started", 0	

	end